import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
  repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:1.3.0'
    classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    //classpath 'com.amazon.device.tools.build:gradle:0.13.+' // When building for Amazon
  }
}

// Manifest version information!
File versionFile = file('version.properties');
def Properties versionProps = new Properties()
versionProps.load(new FileInputStream(versionFile))

project.ext.versionMajor = Integer.parseInt((String) versionProps['VERSION_MAJOR'])
project.ext.versionMinor = Integer.parseInt((String) versionProps['VERSION_MINOR'])
project.ext.versionPatch = Integer.parseInt((String) versionProps['VERSION_PATCH'])
project.ext.versionBuild = Integer.parseInt((String) versionProps['VERSION_BUILD'])

apply plugin: 'com.android.application'
apply plugin: 'crashlytics'

repositories {
  maven { url "http://dl.bintray.com/populov/maven" }
  mavenCentral()
  maven { url 'http://download.crashlytics.com/maven' }
  maven { url "https://github.com/dahlgren/pulltorefresh-aar/raw/master" }
  maven { url 'http://clinker.47deg.com/nexus/content/groups/public' }
  maven { url 'https://github.com/TradeHero/TH_MAVEN/raw/master' }
  maven { url 'http://ooo-maven.googlecode.com/hg/repository' }
  maven { url 'http://mobile-sdk.jumio.com' }
}

project.ext.gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
project.ext.buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

project.ext.isTravis = "true".equals(System.getenv("TRAVIS"))
project.ext.preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))
project.ext.isIntelliJ = true

project.ext.java8home = System.getenv("JAVA8_HOME")
if (project.ext.java8home == null) {
  // MacOS
  project.ext.java8home = '/usr/libexec/java_home -v 1.8'.execute([], project.rootDir).text.trim()
}
project.ext.javahome = System.getenv("JAVA_HOME")
if (project.ext.javahome == null) {
  // MacOS
  project.ext.javahome = '/usr/libexec/java_home -v 1.7'.execute([], project.rootDir).text.trim()
}

android {
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  compileSdkVersion 22

  buildToolsVersion "22.0.1"
  //useOldManifestMerger=true

  dexOptions {
    // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
    preDexLibraries = project.ext.preDexEnabled && !project.ext.isTravis
    // TODO is this really necessary?
    jumboMode = true

    //incremental true
    javaMaxHeapSize "4g"
  }

  defaultConfig {
    minSdkVersion 14
    targetSdkVersion 22

    versionCode project.ext.versionBuild
    versionName "${project.ext.versionMajor}.${project.ext.versionMinor}.${project.ext.versionPatch}"

    buildConfigField "String", "GIT_SHA", "\"${project.ext.gitSha}\""
    buildConfigField "String", "BUILD_TIME", "\"${project.ext.buildTime}\""
    buildConfigField "boolean", "IS_INTELLIJ", "${project.ext.isIntelliJ}"
    buildConfigField "int", "TAPSTREAM_VERSION", "0"
  }

  signingConfigs {
    release {
    }
  }

  buildTypes {
    debug {
      minifyEnabled "true".equals(System.getenv("PROGUARD_FOR_DEBUG"))
      proguardFile 'proguard/proguard-android-fast.txt'
      //zipAlign true
      // versionNameSuffix interferes with the version the server receives
      applicationIdSuffix '.dev'
      versionNameSuffix '-dev'

      // Enabling multidex support.
      multiDexEnabled true
    }
    release {
      minifyEnabled true
      proguardFile 'proguard/proguard-android.txt'
      shrinkResources false
      signingConfig signingConfigs.release
    }
  }

  // There may be further flavorGroups dimensions in the future
  flavorDimensions "marketSegment", "liveOrNot", "pushProvider"

  productFlavors {
    googleplay {
      flavorDimension "marketSegment"
      buildConfigField "String", "GOOGLE_PLAY_PACKAGE_NAME", "\"com.tradehero.th\""

      // Enabling multidex support.
      multiDexEnabled true
    }

    samsung {
      flavorDimension "marketSegment"

      // Enabling multidex support.
      multiDexEnabled true

      minSdkVersion 15 // Dictated by IAP v3.0
    }

    amazon {
      flavorDimension "marketSegment"
      proguardFile 'proguard/proguard-android-amazon.txt'
      // https://github.com/TradeHero/TH_ANDROID/wiki/Amazon
      //compileSdkVersion = [ 20 , "Amazon.com:Amazon Fire Phone SDK Addon:17" ]
    }

    game {
      flavorDimension "liveOrNot"
    }

    live {
      flavorDimension "liveOrNot"
    }

    airship {
      flavorDimension "pushProvider"
    }

    noPush {
      flavorDimension "pushProvider"
    }
  }

  sourceSets {
    main {
      java {
        srcDir 'src/dagger1/java'
      }
      res {
        srcDir 'res'
      }
      assets {
        srcDir 'assets'
      }
    }

    debug {
      java {
        srcDir 'src/dagger1Debug/java'
      }
    }

    release {
      java {
        srcDir 'src/dagger1Release/java'
      }
    }

    game {
      java {
        srcDir 'src/dagger1Game/java'
      }
    }

    live {
      java {
        srcDir 'src/dagger1Live/java'
      }
    }

    //region Flavours
    googleplay {
      java {
        srcDir 'src/row/java'
      }
    }

    googleplayGameNoPushDebug {
      java {
        srcDir 'src/googleplayDebug/java'
      }
    }

    googleplayLiveNoPushDebug {
      java {
        srcDir 'src/googleplayDebug/java'
        srcDir 'src/liveDebug/java'
        srcDir 'src/dagger1LiveDebug/java'
      }
    }

    googleplayGameAirship {
      manifest {
        srcFile 'src/googleplayAirship/AndroidManifest.xml'
      }
      java {
        srcDir 'src/googleplayAirship/java'
      }
    }

    googleplayLiveAirship {
      manifest {
        srcFile 'src/googleplayAirship/AndroidManifest.xml'
      }
      java {
        srcDir 'src/googleplayAirship/java'
      }
    }

    googleplayGameAirshipDebug {
      java {
        srcDir 'src/googleplayDebug/java'
      }
    }

    googleplayLiveAirshipDebug {
      java {
        srcDir 'src/googleplayDebug/java'
        srcDir 'src/liveDebug/java'
        srcDir 'src/dagger1LiveDebug/java'
      }
    }

    googleplayGameNoPushRelease {
      java {
        srcDir 'src/googleplayRelease/java'
      }
    }

    googleplayLiveNoPushRelease {
      java {
        srcDir 'src/googleplayRelease/java'
        srcDir 'src/liveRelease/java'
        srcDir 'src/dagger1LiveRelease/java'
      }
    }

    googleplayGameAirshipRelease {
      manifest {
        srcFile 'src/googleplayAirshipRelease/AndroidManifest.xml'
      }
      java {
        srcDir 'src/googleplayRelease/java'
      }
    }

    googleplayLiveAirshipRelease {
      manifest {
        srcFile 'src/googleplayAirshipRelease/AndroidManifest.xml'
      }
      java {
        srcDir 'src/googleplayRelease/java'
        //HACK just to make a test build
        //        srcDir 'src/liveRelease/java'
        //        srcDir 'src/dagger1LiveRelease/java'
        srcDir 'src/liveDebug/java'
        srcDir 'src/dagger1LiveDebug/java'
      }
    }

    samsung {
      java {
        srcDir 'src/row/java'
      }
    }

    samsungGameNoPushDebug {
      java {
        srcDir 'src/samsungDebug/java'
      }
    }

    samsungLiveNoPushDebug {
      java {
        srcDir 'src/samsungDebug/java'
        srcDir 'src/liveDebug/java'
        srcDir 'src/dagger1LiveDebug/java'
      }
    }

    samsungGameAirship {
      manifest {
        srcFile 'src/googleplayAirship/AndroidManifest.xml' // Reuse until there is something special for Samsung
      }
      java {
        srcDir 'src/samsungAirship/java'
      }
    }

    samsungLiveAirship {
      manifest {
        srcFile 'src/googleplayAirship/AndroidManifest.xml' // Reuse until there is something special for Samsung
      }
      java {
        srcDir 'src/samsungAirship/java'
      }
    }

    samsungGameAirshipDebug {
      java {
        srcDir 'src/samsungDebug/java'
      }
    }

    samsungLiveAirshipDebug {
      java {
        srcDir 'src/samsungDebug/java'
        srcDir 'src/dagger1LiveDebug/java'
      }
    }

    samsungGameNoPushRelease {
      java {
        srcDir 'src/samsungRelease/java'
      }
    }

    samsungLiveNoPushRelease {
      java {
        srcDir 'src/samsungRelease/java'
        srcDir 'src/dagger1LiveRelease/java'
      }
    }

    samsungGameAirshipRelease {
      manifest {
        srcFile 'src/googleplayAirshipRelease/AndroidManifest.xml' // Reuse until there is something special for Samsung
      }
      java {
        srcDir 'src/samsungRelease/java'
      }
    }

    samsungLiveAirshipRelease {
      manifest {
        srcFile 'src/googleplayAirshipRelease/AndroidManifest.xml' // Reuse until there is something special for Samsung
      }
      java {
        srcDir 'src/samsungRelease/java'
        srcDir 'src/dagger1LiveRelease/java'
      }
    }

    amazon {
      java {
        srcDir 'src/row/java'
      }
    }

    amazonGameNoPushDebug {
      java {
        srcDir 'src/amazonDebug/java'
      }
    }

    amazonLiveNoPushDebug {
      java {
        srcDir 'src/amazonDebug/java'
        srcDir 'src/liveDebug/java'
        srcDir 'src/dagger1LiveDebug/java'
      }
    }

    amazonGameAirship {
      manifest {
        srcFile 'src/amazonAirship/AndroidManifest.xml'
      }
      java {
        srcDir 'src/amazonAirship/java'
      }
    }

    amazonLiveAirship {
      manifest {
        srcFile 'src/amazonAirship/AndroidManifest.xml'
      }
      java {
        srcDir 'src/amazonAirship/java'
      }
    }

    amazonGameAirshipDebug {
      java {
        srcDir 'src/amazonDebug/java'
      }
    }

    amazonLiveAirshipDebug {
      java {
        srcDir 'src/amazonDebug/java'
        srcDir 'src/dagger1LiveDebug/java'
      }
    }

    amazonGameNoPushRelease {
      java {
        srcDir 'src/amazonRelease/java'
      }
    }

    amazonLiveNoPushRelease {
      java {
        srcDir 'src/amazonRelease/java'
        srcDir 'src/dagger1LiveRelease/java'
      }
    }

    amazonGameAirshipRelease {
      java {
        srcDir 'src/amazonRelease/java'
      }
    }

    amazonLiveAirshipRelease {
      java {
        srcDir 'src/amazonRelease/java'
        srcDir 'src/dagger1LiveRelease/java'
      }
    }
    //endregion
  }

  lintOptions {
    checkReleaseBuilds false
    abortOnError false
  }

  packagingOptions {
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
}

dependencies {
  // Helper here http://gradleplease.appspot.com
  androidTestCompile "junit:junit:${JUNIT_VERSION}"
  testCompile "junit:junit:${JUNIT_VERSION}"

  compile fileTree(dir: 'libs', include: ['*.jar'])
  releaseCompile fileTree(dir: 'libs/analytics', include: ['*.jar'])

  // For swipelistview
  compile 'com.nineoldandroids:library:2.4.0'

  // for qq
  releaseCompile fileTree(dir: 'libs/qq', include: ['*.jar'])

  samsungCompile 'com.sec.android.iap:library:3.0@aar'
  // TODO confirm on a hardware that it is "provided" and not "compile"
  amazonCompile 'com.amazon:in-app-purchasing:2.0.61'
  //  testAmazonCompile 'com.amazon:in-app-purchasing:2.0.0'
  // This does not work as we would hope. Second "setProperty" wins
  //def fbproj = project(':facebook-android-sdk:facebook')
  //fbproj.ext.TEST_GOOGLE_PLAY = "true" // Swap to this one for others
  ////fbproj.ext.TEST_GOOGLE_PLAY = "false" // Swap to this one for Amazon
  //compile(fbproj) {
  //  exclude group: 'com.android.support', module: 'support-v4'
  //}

  debugCompile 'com.facebook.android:library:3.15.0@aar' // 3.19.1 gives 65k error
  releaseCompile 'com.facebook.android:library:3.22.0@aar'
  compile 'com.parse.bolts:bolts-android:1.1.4' // For Facebook

  compile("com.android.support:support-v13:${SUPPORT_V13_VERSION}")
  compile "com.android.support:appcompat-v7:${SUPPORT_V7_VERSION}"
  compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
  compile "com.android.support:design:${SUPPORT_V7_VERSION}"
  releaseCompile "com.android.support:cardview-v7:${SUPPORT_V7_VERSION}" // For UrbanAirship proguarding
  liveCompile "com.android.support:cardview-v7:${SUPPORT_V7_VERSION}" // For Jumio
  googleplayCompile 'com.android.support:multidex:1.0.1'
  samsungCompile 'com.android.support:multidex:1.0.1'

  //provided 'proguard:annotations:4.6'
  compile("se.emilsjolander:stickylistheaders:${STICKY_LIST_HEADERS_VERSION}@aar") {
    exclude group: 'com.google.android', module: 'support-v4'
  }
  compile('com.fortysevendeg.swipelistview:swipelistview:1.0-SNAPSHOT@aar') {
    transitive = true
    exclude group: 'com.nineoldandroids', module: 'library'
    // exclude group: 'com.android.support', module: 'appcompat-v7'
  }
  compile('com.etiennelawlor.quickreturn:library:1.0.2-aar@aar') {
    exclude group: 'com.android.support', module: 'support-v13'
    exclude group: 'com.jakewharton', module: 'butterknife'
    exclude group: 'com.squareup.picasso', module: 'picasso'
    exclude group: 'com.nineoldandroids', module: 'library'
  }
  compile('com.squareup.picasso:picasso:2.5.2') {
    exclude group: "com.squareup.okhttp", module: "okhttp"
    exclude group: "com.squareup.okhttp", module: "okhttp-urlconnection"
  }
  compile "com.squareup.okhttp:okhttp:${OKHTTP_VERSION}"
  compile("com.squareup.okhttp:okhttp-urlconnection:${OKHTTP_VERSION}") {
    exclude group: "com.squareup.okhttp", module: "okhttp"
  }
  compile("com.squareup.retrofit:retrofit:${RETROFIT_VERSION}") {
    exclude module: 'gson'
    exclude module: 'rxjava'
  }
  compile("com.squareup.retrofit:converter-jackson:${RETROFIT_VERSION}") {
    exclude module: 'gson'
    exclude group: 'com.squareup.retrofit', module: 'retrofit'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
  }
  compile('com.viewpagerindicator:library:2.4.1') {
    exclude group: 'com.google.android', module: 'support-v4'
  }

  compile("in.srain.cube:grid-view-with-header-footer:${GRID_VIEW_WITH_HEADER_VERSION}")

  compile 'com.tradehero:metrics:2.1.1-SNAPSHOT'
  compile "com.squareup.dagger:dagger:${DAGGER_VERSION}"
  provided "com.squareup.dagger:dagger-compiler:${DAGGER_VERSION}"
  compile "io.reactivex:rxandroid:${RX_ANDROID_VERSION}"
  //compile 'io.reactivex:rxjava-joins:0.21.0'
  compile "com.jakewharton.timber:timber:${TIMBER_VERSION}"

  airshipCompile "com.urbanairship:urbanairship-lib:${URBAN_AIRSHIP_VERSION}@aar"
  amazonCompile "com.amazon:amazon-device-messaging:${AMAZON_DEVICE_MESSAGING_VERSION}" // Should be amazonAirshipCompile, if Gradle was better

  compile "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VERSION}"
  compile 'com.tradehero.route:route:0.2-SNAPSHOT'
  compile "com.android.support:support-annotations:${SUPPORT_V7_VERSION}"
  releaseCompile 'com.crashlytics.android:crashlytics:1.+'
  compile("oauth.signpost:signpost-core:${SIGNPOST_VERSION}") {
    exclude group: 'commons-codec', module: 'commons-codec'
  }
  compile("oauth.signpost:signpost-commonshttp4:${SIGNPOST_VERSION}") {
    exclude group: 'commons-logging', module: 'commons-logging'
    exclude group: 'commons-codec', module: 'commons-codec'
    exclude group: 'org.apache.httpcomponents', module: 'httpcore'
    exclude group: 'org.apache.httpcomponents', module: 'httpclient'
  }

  releaseCompile("com.localytics.android:library:${LOCALYTICS_VERSION}") {
    exclude group: 'com.google.android', module: 'support-v4'
  }
  compile "org.ocpsoft.prettytime:prettytime:${PRETTY_TIME_VERSION}"
  compile("com.jakewharton:butterknife:${BUTTER_KNIFE_VERSION}") {
    exclude group: 'se.emilsjolander', module: 'stickylistheaders'
  }
  releaseCompile "com.appsflyer:library:${APPS_FLYER_VERSION}"
  //provided 'com.kenai.nbpwr:edu-umd-cs-findbugs-annotations:1.3.2-201002241900'

  liveCompile "com.jumio.android:jumio-mobile-sdk:${JUMIO_SDK_VERSION}@aar"
  liveCompile "com.jumio.android:netverify-resources:${JUMIO_SDK_VERSION}@aar"
  //  liveCompile "com.jumio.android:netswipe-resources:${JUMIO_SDK_VERSION}@aar"
  liveCompile "com.neovisionaries:nv-i18n:${NV_I18N_VERSION}"
  liveCompile "com.googlecode.libphonenumber:libphonenumber:${LIB_PHONE_NUMBER_VERSION}"

  // For Test
  testCompile('org.robolectric:robolectric:3.0-rc2') {
    exclude module: 'classworlds'
    exclude module: 'commons-logging'
    exclude module: 'httpclient'
    exclude module: 'maven-artifact'
    exclude module: 'maven-artifact-manager'
    exclude module: 'maven-error-diagnostics'
    exclude module: 'maven-model'
    exclude module: 'maven-project'
    exclude module: 'maven-settings'
    exclude module: 'plexus-container-default'
    exclude module: 'plexus-interpolation'
    exclude module: 'plexus-utils'
    exclude module: 'wagon-file'
    exclude module: 'wagon-http-lightweight'
    exclude module: 'wagon-provider-api'
  }
  testCompile 'org.easytesting:fest-assert-core:2.0M10'
  testCompile 'org.mockito:mockito-core:1.10.19'
  testCompile 'org.apache.commons:commons-lang3:3.2'
  testCompile 'org.apache.commons:commons-io:1.3.2'
  testCompile 'org.reflections:reflections:0.9.8'
  if (project.ext.isIntelliJ && file('build/test-classes').exists()) {
    testCompile files('build/test-classes')
  }

  // Remove those when building for Amazon
  releaseCompile "com.google.android.gms:play-services-base:${PLAY_SERVICES_VERSION}" // This one has fewer methods
  releaseCompile "com.google.android.gms:play-services-gcm:${PLAY_SERVICES_VERSION}"
  releaseCompile "com.google.android.gms:play-services-ads:${PLAY_SERVICES_VERSION}"
  liveCompile "com.google.android.gms:play-services-location:${PLAY_SERVICES_VERSION}"
  //releaseCompile 'com.google.android.gms:play-services:6.1.+'
}

File propFile = file('signing.properties');
if (propFile.exists()) {
  def Properties props = new Properties()
  props.load(new FileInputStream(propFile))

  if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
          props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
    android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
    android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
    android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
    android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
  } else {
    android.buildTypes.release.signingConfig = null
  }
} else {
  android.buildTypes.release.signingConfig = null
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

// Fix this annoyance: https://github.com/robolectric/deckard-gradle/blob/master/README.md#required-tweaking-the-module-dependency-order-ie-classpath
task reorderDependencyToFixJunit4Issue {
  def file = file(project.name + ".iml")

  println "reorderDependencyToFixJunit4Issue"
  doLast {
    println "reorderDependencyToFixJunit4Issue-doLast"
    if (file.exists()) {
      def parsedXml = (new XmlParser()).parse(file)
      // find first component node which has orderEntry child
      def targetComponent = parsedXml.component.find { it.orderEntry }
      if (targetComponent) {
        def androidSdk = targetComponent.find {
          it.@type == 'jdk' && it.@jdkType == 'Android SDK'
        }
        if (androidSdk && androidSdk != targetComponent.children().last()) {
          // reposition android sdk dependency in the iml file
          targetComponent.remove(androidSdk)
          targetComponent.append(androidSdk)

          // update iml file
          def writer = new StringWriter()
          new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
          file.text = writer.toString()
        }
      }
    }
  }
}

preBuild.dependsOn(reorderDependencyToFixJunit4Issue)

tasks.whenTaskAdded { theTask ->
  def taskName = theTask.name.toString()
  if (taskName.matches(/test.*(Debug|Release)/)) {
    /**
     * Listen for when robolectric adds the 'testDebug' task and when it does, add the -noverify
     * option to that task's jvmArgs.  This allows us to turn off byte code verification when
     * running our unit tests.
     */
    theTask.jvmArgs('-noverify')
  }
}

def testResourceFilesToCopy = copySpec {
  from "${projectDir}/src/test/resources"
}

task copyTestResources {
  println("Copying test resources")
  [
          "${buildDir}/intermediates/classes/test/amazonairship/debug",
          "${buildDir}/intermediates/classes/test/amazonairship/release",
          "${buildDir}/intermediates/classes/test/amazonnopush/debug",
          "${buildDir}/intermediates/classes/test/amazonnopush/release",
          "${buildDir}/intermediates/classes/test/googleplayairship/debug",
          "${buildDir}/intermediates/classes/test/googleplayairship/release",
          "${buildDir}/intermediates/classes/test/googleplaynopush/debug",
          "${buildDir}/intermediates/classes/test/googleplaynopush/release",
          "${buildDir}/intermediates/classes/test/samsungairship/debug",
          "${buildDir}/intermediates/classes/test/samsungairship/release",
          "${buildDir}/intermediates/classes/test/samsungnopush/debug",
          "${buildDir}/intermediates/classes/test/samsungnopush/release"
  ].each { dest ->
    copy {
      with testResourceFilesToCopy
      into dest
    }
  }
}

project.afterEvaluate {
  println("afterEvaluate")
  Pattern flavorsPattern = Pattern.compile("compile(.+)DebugJava")

  tasks.each { theTask ->
    if (project.ext.isIntelliJ
            && theTask.name.matches("assemble.+Release")) {
      println("Adding a version build bump to task " + theTask.name)
      theTask.doLast {
        // Bump version Build
        versionProps.setProperty('VERSION_BUILD', (project.ext.versionBuild + 1).toString())
        def map = versionProps.sort(new Comparator<Object>() {
          @Override int compare(Object left, Object right) {
            // TODO this does not appear to save the properties in the desired order
            return versionPropIndex(left.toString()).compareTo(versionPropIndex(right.toString()))
          }
        })
        versionProps = new Properties()
        versionProps.putAll(map)
        versionProps.store(versionFile.newWriter(), null)
      }
    }

    Matcher m = flavorsPattern.matcher(theTask.getName())
    while (m.find()) {
      println("Adding copy to " + theTask.getName() +
              " from " +
              "${projectDir}/src/test/resources" +
              " to " +
              "${buildDir}/intermediates/classes/test/${m.group(1).toLowerCase()}/debug")
      theTask.dependsOn("copyTestResources")
    }
  }
}

Integer versionPropIndex(String key) {
  if (key.equals("VERSION_MAJOR")) return 0
  if (key.equals("VERSION_MINOR")) return 1
  if (key.equals("VERSION_PATCH")) return 2
  if (key.equals("VERSION_BUILD")) return 3
  throw new IllegalStateException("Unknown key " + key)
}

task showMeCache << {
  configurations.compile.each { println it }

  int mb = 1024 * 1024;

  //Getting the runtime reference from system
  Runtime runtime = Runtime.getRuntime();

  System.out.println("##### Heap utilization statistics [MB] #####");

  //Print used memory
  System.out.println("Used Memory:"
          + (runtime.totalMemory() - runtime.freeMemory()) / mb);

  //Print free memory
  System.out.println("Free Memory:"
          + runtime.freeMemory() / mb);

  //Print total available memory
  System.out.println("Total Memory:" + runtime.totalMemory() / mb);

  //Print Maximum available memory
  System.out.println("Max Memory:" + runtime.maxMemory() / mb);
}
